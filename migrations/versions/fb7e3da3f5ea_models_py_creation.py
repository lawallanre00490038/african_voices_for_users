"""models.py creation

Revision ID: fb7e3da3f5ea
Revises: 
Create Date: 2025-09-13 21:06:50.537656

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
import sqlmodel

# revision identifiers, used by Alembic.
revision: str = 'fb7e3da3f5ea'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.VARCHAR(), nullable=False),
    sa.Column('full_name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('email', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('password', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('is_verified', sa.Boolean(), nullable=False),
    sa.Column('verification_token', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email')
    )
    op.create_table('dataset',
    sa.Column('id', sa.VARCHAR(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('created_by', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('feedback',
    sa.Column('id', sa.VARCHAR(), nullable=False),
    sa.Column('user_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('fullname', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('email', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('rating', sa.Integer(), nullable=True),
    sa.Column('issues', sa.JSON(), nullable=True),
    sa.Column('other_issue', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('suggestions', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('audiosample',
    sa.Column('id', sa.VARCHAR(), nullable=False),
    sa.Column('dataset_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('annotator_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('sentence_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('sentence', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('storage_link', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('gender', sa.VARCHAR(), nullable=True),
    sa.Column('age_group', sa.VARCHAR(), nullable=True),
    sa.Column('edu_level', sa.VARCHAR(), nullable=True),
    sa.Column('durations', sa.VARCHAR(), nullable=True),
    sa.Column('language', sa.VARCHAR(), nullable=True),
    sa.Column('snr', sa.INTEGER(), nullable=True),
    sa.Column('domain', sa.VARCHAR(), nullable=True),
    sa.Column('category', sa.VARCHAR(), nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), nullable=True),
    sa.Column('uploaded_at', sa.DateTime(), nullable=False),
    sa.CheckConstraint("gender IN ('male','female')", name='check_valid_gender'),
    sa.CheckConstraint('snr >= 0', name='check_snr_non_negative'),
    sa.ForeignKeyConstraint(['dataset_id'], ['dataset.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('audiotag',
    sa.Column('id', sa.VARCHAR(), nullable=False),
    sa.Column('audio_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('key', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('value', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.ForeignKeyConstraint(['audio_id'], ['audiosample.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('qametadata',
    sa.Column('id', sa.VARCHAR(), nullable=False),
    sa.Column('audio_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('qa_status', sa.Enum('passed', 'failed', 'pending', name='optio'), nullable=True),
    sa.Column('duration_check', sa.Boolean(), nullable=False),
    sa.Column('noise_level', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('label_match', sa.Boolean(), nullable=False),
    sa.Column('confidence_score', sa.Float(), nullable=False),
    sa.Column('reviewed_by', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('reviewed_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['audio_id'], ['audiosample.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('audio_id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('qametadata')
    op.drop_table('audiotag')
    op.drop_table('audiosample')
    op.drop_table('feedback')
    op.drop_table('dataset')
    op.drop_table('users')
    # ### end Alembic commands ###
